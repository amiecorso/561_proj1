// lex.yy.cpp generated by reflex 1.4.3 from quack.lxx

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_YYLTYPE             yy::location
#define REFLEX_OPTION_YYSTYPE             yy::parser::semantic_type
#define REFLEX_OPTION_bison_cc            true
#define REFLEX_OPTION_bison_cc_namespace  yy
#define REFLEX_OPTION_bison_cc_parser     parser
#define REFLEX_OPTION_bison_locations     true
#define REFLEX_OPTION_header_file         "lex.yy.h"
#define REFLEX_OPTION_lex                 yylex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_namespace           yy
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "lex.yy.cpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top{ user code %}                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "quack.lxx"

/* Quack scanner
 *
 * 2018 Fall version for RE/flex,
 * skeleton.
 *
 */

#include "quack.tab.hxx"  /* Generated by bison. */
#include "Messages.h"
#include <string.h>


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace yy {

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {
 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  static const int comment = 1;
  virtual void yylloc_update(yy::location& yylloc)
  {
    yylloc.begin.line = static_cast<unsigned int>(matcher().lineno());
    yylloc.begin.column = static_cast<unsigned int>(matcher().columno());
    yylloc.end.line = static_cast<unsigned int>(yylloc.begin.line + matcher().lines() - 1);
    yylloc.end.column = static_cast<unsigned int>(yylloc.begin.column + matcher().columns() - 1);
  }
  virtual int yylex(yy::parser::semantic_type *lvalp, yy::location *llocp)
  {
    return yylex(*lvalp, *llocp);
  }
  virtual int yylex(yy::parser::semantic_type& yylval, yy::location& yylloc);
};

} // namespace yy

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 14 "quack.lxx"

/* Externally visible file name --
* for error messages.
* FIXME: Need to extract this from structures that reflex passes
* or else find another way to dig it out.
*/
std::string yyfilename = "What file is this, anyway?";

/* Some strings can't be matched in one gulp.  We need
 * a buffer in which to assemble them from parts.
 */
std::string string_buf = "";

void yyerror (const std::string &msg, yy::position* where) {
     std::cout << where << ": " << msg;
}

/* Some long messages that don't fit well in the code below */

std::string BAD_ESC_MSG =
  "Illegal escape code; only \\\\, \\0, \\t, \\n, \\r, \\n are permitted";
std::string BAD_NL_STR =
  "Unclosed string?  Encountered newline in quoted string.";


#line 44 "quack.lxx"
/* You'll probably want scanner states for both multi-line
   * comments and for triple-quote strings.  Do comments first,
   * because they're easier (you just throw away the text).  Then
   * do triple-quote strings.  You might consider doing the same for
   * normal strings with a single pair of double quotes, to avoid
   * writing a really ugly regex.  'comment' here is an example of
   * how to declare an exclusive scanner state.
   */

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON C++                                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

int yy::Lexer::yylex(yy::parser::semantic_type& yylval, yy::location& yylloc)
{
  static const char *REGEX_INITIAL = "(?m)(==)|([<]=)|([>]=)|([*+\\x2d/])|([<>])|(class)|(def)|(extends)|(if)|(elif)|(else)|(while)|(return)|(typecase)|(and)|(or)|(not)|([A-Z_a-z]+[0-9A-Z_a-z]*)|([0-9]+)|([\\x09\\x0a\\x20]*)|([/][\\x2a])|(.)";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  static const char *REGEX_comment = "(?m)([^\\x2a]*)|([\\x2a][^/])|([\\x2a][/])";
  static const reflex::Pattern PATTERN_comment(REGEX_comment);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  switch (start())
  {
    case INITIAL:
#line 61 "quack.lxx"
/* We start with some tokens that are not value-bearing,
   * i.e., the parser needs to know only which token was matched.
   */

  /* Multi-character punctuation with names */
    break;
  }
  while (true)
  {
    switch (start())
    {
      case INITIAL:
        matcher().pattern(PATTERN_INITIAL);
        matcher().scan();
        yylloc_update(yylloc);
        switch (matcher().accept())
        {
          case 0:
            if (matcher().at_end())
            {
#line 160 "quack.lxx"
{ return EOF; }

            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule at line 61: ==
#line 61 "quack.lxx"
{ return parser::token::EQUALS; }
            break;
          case 2: // rule at line 62: [<]=
#line 62 "quack.lxx"
{ return parser::token::ATMOST; }
            break;
          case 3: // rule at line 63: [>]=
#line 63 "quack.lxx"
{ return parser::token::ATLEAST; }

   /* Single character punctuation.  Because a character
    * in C or C++ can be treated as an integer, Bison lets
    * us return a character as a token.
    * JFlex/Cup do not let you do this in Java.
    * Here are a few ... there are more.
    */
            break;
          case 4: // rule at line 71: [*+\x2d/]
#line 71 "quack.lxx"
{ return text()[0]; }
            break;
          case 5: // rule at line 72: [<>]
#line 72 "quack.lxx"
{ return text()[0]; }

            break;
          case 6: // rule at line 94: class
#line 94 "quack.lxx"
{ return parser::token::CLASS; }
            break;
          case 7: // rule at line 95: def
#line 95 "quack.lxx"
{ return parser::token::DEF; }
            break;
          case 8: // rule at line 96: extends
#line 96 "quack.lxx"
{ return parser::token::EXTENDS; }
            break;
          case 9: // rule at line 97: if
#line 97 "quack.lxx"
{ return parser::token::IF; }
            break;
          case 10: // rule at line 98: elif
#line 98 "quack.lxx"
{ return parser::token::ELIF; }
            break;
          case 11: // rule at line 99: else
#line 99 "quack.lxx"
{ return parser::token::ELSE; }
            break;
          case 12: // rule at line 100: while
#line 100 "quack.lxx"
{ return parser::token::WHILE; }
            break;
          case 13: // rule at line 101: return
#line 101 "quack.lxx"
{ return parser::token::RETURN; }
            break;
          case 14: // rule at line 102: typecase
#line 102 "quack.lxx"
{return parser::token::TYPECASE; }

            break;
          case 15: // rule at line 111: and
#line 111 "quack.lxx"
{ return parser::token::AND; }
            break;
          case 16: // rule at line 112: or
#line 112 "quack.lxx"
{ return parser::token::OR; }
            break;
          case 17: // rule at line 113: not
#line 113 "quack.lxx"
{ return parser::token::NOT; }
            break;
          case 18: // rule at line 131: [A-Z_a-z]+[0-9A-Z_a-z]*
#line 131 "quack.lxx"
{ yylval.str = strdup(text()); return parser::token::IDENT; }

            break;
          case 19: // rule at line 134: [0-9]+
#line 134 "quack.lxx"
{ yylval.num = atoi(text()); return parser::token::INT_LIT; }

            break;
          case 20: // rule at line 147: [\x09\x0a\x20]*
#line 147 "quack.lxx"
{ ; }

   /* Multi-line comments */
            break;
          case 21: // rule at line 150: [/][\x2a]
#line 150 "quack.lxx"
{ start(comment); }
            break;
          case 22: // rule at line 155: .
#line 155 "quack.lxx"
{   report::error("Unexpected character '" + std::string(text()) + "'" +
       " at line " + std::to_string(lineno()) +
       ", column " + std::to_string(columno()));
   }

            break;
        }
        break;
      case comment:
        matcher().pattern(PATTERN_comment);
        matcher().scan();
        yylloc_update(yylloc);
        switch (matcher().accept())
        {
          case 0:
            if (matcher().at_end())
            {
#line 160 "quack.lxx"
{ return EOF; }

            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule at line 151: [^\x2a]*
#line 151 "quack.lxx"
{ ; }
            break;
          case 2: // rule at line 152: [\x2a][^/]
#line 152 "quack.lxx"
{ ; }
            break;
          case 3: // rule at line 153: [\x2a][/]
#line 153 "quack.lxx"
{ start(INITIAL); }

            break;
        }
        break;
      default:
        start(0);
    }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 3: user code                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 163 "quack.lxx"

/* No main program here */

