%top{
/* Python source normalization for plagiarism checker
 * (example only)
 * 2019 Fall version with RE/flex,
 * 
 */ 

 #include <iostream>
%}

%option noyywrap
%option namespace=yy lexer=Lexer lex=yylex

  /* Lexical states to avoid big hairy patterns ---
   * %x is for an 'exclusive' state.
   * See https://www.genivia.com/doc/reflex/html/index.html#reflex-states
   * Python has 's', "s",  """s""", '''s'''.
   * We'll abbreviate quoted modes with q for ', Q for "
   */
%x q
%x Q
%x qqq
%x QQQ

%%

  /* End-of-line comments start with #.  Chop them. */
#.*   { ; }

  /* Strings.  We'll preserve them, although maybe we should chop them?  */
\'       { echo(); start(q); }
\'\'\'   { echo(); start(qqq); }
\"       { echo(); start(Q); }
\"\"\"   { echo(); start(QQQ); }

   /* How the quoted strings end */
<q>\'        { std::cout << "@"; echo(); start(INITIAL); }
<qqq>\'\'\'  { echo(); std::cout << "@"; start(INITIAL); }
<Q>\"        { std::cout << "@"; echo(); start(INITIAL); }
<QQQ>\"\"\"  { std::cout << "@"; echo(); start(INITIAL);}


   /* They all gobble any escaped character */
<q,qqq,Q,QQQ>[\\].  { ;  }

  /* Only triple-quoted strings can gobble unescaped newlines.
   *  (Note the wild-card character '.' does not match newline)
   */
<qqq,QQQ>\n  { ; }

  /* They gobble anything else. We do it one character at a time so that
   * we don't have to make exceptions for the quote marks.
   */
<q,qqq,Q,QQQ>.  { ;  }


  /* Keywords and built-in functions that we preserve.
   * We want these to take precedence over the identifier pattern.
   * Keywords from
   * https://docs.python.org/3/reference/lexical_analysis.html#keywords
   */
False|await|else|import|pass    echo();
None|break|except|in|raise      echo();
True|class|finally|is|return    echo();
and|continue|for|lambda|try     echo();
as|def|from|nonlocal|while      echo();
assert|del|global|not|with      echo();
async|elif|if|or|yield          echo();
    /* Built-in function names from
     * https://docs.python.org/3/library/functions.html
     */
abs|delattr|hash|memoryview|set|all  echo();
dict|help|min|setattr|any|dir|hex    echo();
next|slice|ascii|divmod|id|object    echo();
sorted|bin|enumerate|input|oct       echo();
staticmethod|bool|eval|int|open|str  echo();
breakpoint|exec|isinstance|ord|sum   echo();
bytearray|filter|issubclass|pow      echo();
super|bytes|float|iter|print|tuple   echo();
callable|format|len|property|type    echo();
chr|frozenset|list|range|vars        echo();
classmethod|getattr|locals|repr      echo();
zip|compile|globals|map|reversed     echo();
__import__|complex|hasattr|max|round echo();

  /* A handful of magic methods should also be preserved
   * (not an exhaustive list)
   */
__new__|__init__|__del__        echo();
__cmp__|__eq__|__ne__           echo();
__lt__|__gt__|__le__|__ge__     echo();
__pos__|__neg__|__abs__         echo();
__add__|__sub__|__mul__|__div__ echo();
__str__|__repr__|__format__     echo();
__iter__|__len__|__contains__   echo();



   /* We reduce all other identifiers starting with a lower-case letter
    * to the representative token 'i', and all identifiers starting
    * with an upper-case letter to 'I', and identifiers starting with
    * '_' to '_'.
    */

[a-z][a-zA-Z0-9_]*  { std::cout << "i"; }
[A-Z][a-zA-Z0-9_]*  { std::cout << "I"; }
[_][a-zA-Z0-9_]*    { std::cout << "_"; }

  /* Whitespace is significant in Python, so we don't discard it all, but
   * we will chop it at the end of the line. Compress away blank lines.
   * Also remove lines containing only comments.
   */

([ \n\r\t]|#.*)*\n  { std::cout << "\n"; }

  /* Everything else is preserved. '.' matches any character but newline. */
. echo();

<<EOF>>  { return 0; }

%%

/* For simple filters, the main program can go here. */

int main() {  yy::Lexer().yylex(); exit(0); }
